{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["formReducer","state","event","Object","objectSpread","defineProperty","name","value","App","_useReducer","useReducer","_useReducer2","slicedToArray","formData","setFormData","_useState","useState","_useState2","submitting","setSubmitting","handleChange","isCheckbox","target","type","checked","react_default","a","createElement","className","entries","map","_ref","_ref2","key","toString","onSubmit","preventDefault","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d39042c0.chunk.js","sourcesContent":["import React, { useReducer, useState } from 'react';\nimport './App.css';\n\nconst formReducer = (state, event) => {\n return {\n   ...state,\n   [event.name]: event.value\n }\n}\n\nfunction App() {\n  const [formData, setFormData] = useReducer(formReducer, {});\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    setSubmitting(true); \n  }\n\n  const handleChange = event => {\n   const isCheckbox = event.target.type === 'checkbox';\n   setFormData({\n     name: event.target.name,\n     value: isCheckbox ? event.target.checked : event.target.value,\n   })\n }\n\n  \n\n  return(\n    <div className=\"wrapper\">\n      \n      {submitting &&\n        <div>\n          You are submitting the following:\n          <ul>\n            {Object.entries(formData).map(([name, value]) => (\n              <li key={name}><strong>{name}</strong>: {value.toString()}</li>\n            ))}\n          </ul>\n        </div>\n      }\n      \n      <form onSubmit={handleSubmit}>\n       \n        <fieldset>\n        <legend>Application Form </legend>\n          <label>\n            <p>First Name</p>\n            <input className=\"input\" name=\"first name\" onChange={handleChange}/>\n          </label>\n          <label>\n            <p>Last Name</p>\n            <input className=\"input\"  name=\"last name\" onChange={handleChange}/>\n          </label>\n          <label>\n            <p>Phone Number</p>\n            <input className=\"input\"  name=\"phone number\" onChange={handleChange}/>\n          </label>\n          <label>\n            <p>Email-id</p>\n            <input className=\"input\"  name=\"email\" onChange={handleChange}/>\n          </label>\n         <label>\n           <p>Courses</p>\n           <select className=\"input\" name=\"courses\" onChange={handleChange}>\n               <option value=\"\">--Please choose an option--</option>\n               <option value=\"Fullstack\">Fullstack</option>\n               <option value=\"Frontend\">Frontend</option>\n               <option value=\"Backend\">Backend</option>\n           </select>\n         </label>\n         <label>\n           <p>Highest Degree</p>\n           <select className=\"input\" name=\"highest degree\" onChange={handleChange}>\n               <option value=\"\">--Please choose an option--</option>\n               <option value=\"B.E./B.Tech\">B.E./B.Tech</option>\n               <option value=\"M.S./M.Tech\">M.S./M.Tech</option>\n               <option value=\"Others\">Others</option>\n           </select>\n         </label>\n         <label>\n            <p>Year of Completion</p>\n            <input className=\"input\" name=\"yoe\" onChange={handleChange}/>\n          </label>\n          <br/>\n          <br/>\n          <label>\n           <input type=\"checkbox\" name=\"signup\" onChange={handleChange} />By signing up, you agree to the Terms and conditions\n         </label>\n         <br/>\n          <br/>\n        <button type=\"submit\">Submit</button>\n        </fieldset>\n      </form>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}